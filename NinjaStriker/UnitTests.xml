<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitTests</name>
    </assembly>
    <members>
        <member name="T:UnitTests.Component.TestBaseComponent">
            <summary>The test base component.</summary>
        </member>
        <member name="P:UnitTests.Component.TestBaseComponent.Value">
            <summary>Gets or sets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:UnitTests.Component.TestBaseComponent.IsDerived">
            <summary>The is derived.</summary>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="T:UnitTests.Component.TestDerivedComponent">
            <summary>The test derived component.</summary>
        </member>
        <member name="P:UnitTests.Component.TestDerivedComponent.DerivedValue">
            <summary>Gets or sets the derived value.</summary>
            <value>The derived value.</value>
        </member>
        <member name="M:UnitTests.Component.TestDerivedComponent.IsDerived">
            <summary>The is derived.</summary>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="T:UnitTests.Component.TestHealthComponent">
            <summary>The health.</summary>
        </member>
        <member name="F:UnitTests.Component.TestHealthComponent.points">
            <summary>The health points.</summary>
        </member>
        <member name="M:UnitTests.Component.TestHealthComponent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.Component.TestHealthComponent" /> class.</summary>
        </member>
        <member name="M:UnitTests.Component.TestHealthComponent.#ctor(System.Single)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.Component.TestHealthComponent" /> class.</summary>
            <param name="points">The health points.</param>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.Points">
            <summary>Gets or sets the health points.</summary>
            <value>The health points.</value>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.Percentage">
            <summary>Gets the health percentage.</summary>
            <value>The health percentage.</value>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.IsAlive">
            <summary>Gets a value indicating whether is alive.</summary>
            <value><see langword="true" /> if this instance is alive; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.MaximumLimit">
            <summary>Gets the maximum health.</summary>
            <value>The maximum health.</value>
        </member>
        <member name="M:UnitTests.Component.TestHealthComponent.AddDamage(System.Int32)">
            <summary>The add damage.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="T:UnitTests.Component.TestPowerComponent">
            <summary>The power 1.</summary>
        </member>
        <member name="P:UnitTests.Component.TestPowerComponent.Power">
            <summary>Gets or sets the power.</summary>
            <value>The power.</value>
        </member>
        <member name="T:UnitTests.Component.TestPowerComponentPoolable">
            <summary>The power 2.</summary>
        </member>
        <member name="P:UnitTests.Component.TestPowerComponentPoolable.Power">
            <summary>Gets or sets the power.</summary>
            <value>The power.</value>
        </member>
        <member name="M:UnitTests.Component.TestPowerComponentPoolable.CreateInstance(System.Type)">
            <summary>The create instance.</summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:UnitTests.Component.TestPowerComponentPoolable" />.</returns>
        </member>
        <member name="T:UnitTests.Extra.DummyPlaceHolder">
            <summary>This useless dummy class to hold a Component. Nice, isn't it?</summary>
        </member>
        <member name="P:UnitTests.Extra.DummyPlaceHolder.Component">
            <summary>Gets or sets the component.</summary>
            <value>The component.</value>
        </member>
        <member name="T:UnitTests.Program">
            <summary>The class Program.</summary>
        </member>
        <member name="M:UnitTests.Program.Main">
            <summary>Defines the entry point of the application.</summary>
        </member>
        <member name="T:UnitTests.System.TestCommunicationSystem">
            <summary>The class test communication system.</summary>
        </member>
        <member name="F:UnitTests.System.TestCommunicationSystem.damage">
            <summary>The damage.</summary>
        </member>
        <member name="M:UnitTests.System.TestCommunicationSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestCommunicationSystem" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestCommunicationSystem.Process(Artemis.Entity)">
            <summary><para>Processes the specified entity.</para>
              <para>Users might extend this method when they want</para>
              <para>to process the specified entities.</para></summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityComponentProcessingSystem1">
            <summary>The test entity component system1 class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityComponentProcessingSystem1.Process(Artemis.Entity,UnitTests.Component.TestHealthComponent)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
            <param name="health">The health.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityComponentProcessingSystem2">
            <summary>The test entity component system2 class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityComponentProcessingSystem2.Process(Artemis.Entity,UnitTests.Component.TestHealthComponent,UnitTests.Component.TestPowerComponent)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
            <param name="health">The health.</param>
            <param name="power">The power.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem">
            <summary>The test entity processing system class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem" /> class.</summary>
        </member>
        <member name="P:UnitTests.System.TestEntityProcessingSystem.Counter">
            <summary>Gets or sets the counter.</summary>
            <value>The counter.</value>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem.ProcessSystem">
            <summary>Processes the System. Users must extend this method. Called once per frame.</summary>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem1">
            <summary>The dummy system 1.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem1" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem1.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem2">
            <summary>The dummy system 2.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem2" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem2.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem3">
            <summary>The dummy system 3.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem3" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem3.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestIntervalEntitySystem">
            <summary>
            Test for Interval Entity System
            </summary>
        </member>
        <member name="M:UnitTests.System.TestIntervalEntitySystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnitTests.System.TestIntervalEntitySystem"/> class.
            </summary>
        </member>
        <member name="M:UnitTests.System.TestIntervalEntitySystem.Process(Artemis.Entity)">
            <summary>
            Processes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestNormalEntityProcessingSystem1">
            <summary>The most simple system ever.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestNormalEntityProcessingSystem1" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem1.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestNormalEntityProcessingSystem2">
            <summary>The second most simple system ever.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestNormalEntityProcessingSystem2" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem2.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestNormalEntityProcessingSystem3">
            <summary>The third most simple system ever.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestNormalEntityProcessingSystem3" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem3.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestProcessingSystem">
            <summary>The dummy system.</summary>
        </member>
        <member name="M:UnitTests.System.TestProcessingSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestProcessingSystem" /> class.</summary>
        </member>
        <member name="P:UnitTests.System.TestProcessingSystem.Counter">
            <summary>Gets or sets the counter.</summary>
            <value>The counter.</value>
        </member>
        <member name="M:UnitTests.System.TestProcessingSystem.ProcessSystem">
            <summary>Processes the System
            Users should extend this method</summary>
        </member>
        <member name="T:UnitTests.System.TestQueueSystem">
            <summary>The queue system test 2.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystem.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueSystem"/> class.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="P:UnitTests.System.TestQueueSystem.Damage">
            <summary>Gets the damage.</summary>
            <value>The damage.</value>
        </member>
        <member name="M:UnitTests.System.TestQueueSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestQueueSystemCopy">
            <summary>The queue system test 2.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueSystemCopy"/> class.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="P:UnitTests.System.TestQueueSystemCopy.Damage">
            <summary>Gets the damage.</summary>
            <value>The damage.</value>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestQueueSystemCopy2">
            <summary>The queue system test 3.</summary>
        </member>
        <member name="F:UnitTests.System.TestQueueSystemCopy2.damage">
            <summary>The damage.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy2.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueSystemCopy2" /> class.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy2.Process(UnitTests.Extra.DummyPlaceHolder)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestRenderHealthBarMultiSystem">
            <summary>The multi health bar render system.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarMultiSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestRenderHealthBarMultiSystem" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarMultiSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestRenderHealthBarSingleHeavySystem">
            <summary>The single heavy health bar render system.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleHeavySystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestRenderHealthBarSingleHeavySystem" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleHeavySystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestRenderHealthBarSingleSystem">
            <summary>The single health bar render system.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestRenderHealthBarSingleSystem" /> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.Template.TestEntityTemplate">
            <summary>Class TestEntityTemplate.</summary>
        </member>
        <member name="M:UnitTests.Template.TestEntityTemplate.BuildEntity(Artemis.Entity,Artemis.EntityWorld,System.Object[])">
            <summary>The build entity.</summary>
            <param name="entity">The entity.</param>
            <param name="entityWorld">The entity world.</param>
            <param name="args">The args.</param>
            <returns>The built <see cref="T:Artemis.Entity" />.</returns>
        </member>
        <member name="T:UnitTests.TestAspect">
            <summary>Aspect test.</summary>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectEmpty">
            <summary>
            Tests Aspect.Empty
            </summary>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectAllSingle">
            <summary>
            Tests Aspect.All with single type required
            </summary>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectAllMultiple">
            <summary>
            Tests Aspect.All with multiple types required
            </summary>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectOneSingle">
            <summary>
            Tests Aspect.One with single type.
            </summary>
            <remarks>
            Should work exactly like Aspect.All with single type.
            Should work like negated Aspect.Exclude with same type.
            </remarks>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectOneMultiple">
            <summary>
            Tests Aspect.One with multiple types, of which an entity must possess.
            </summary>
            <remarks>
            Should work like negated Aspect.Exclude with same set of types
            </remarks>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectExcludeSingle">
            <summary>
            Test Aspect.Exclude with single type excluded.
            </summary>
            <remarks>
            Should work like negated Aspect.One with same type
            </remarks>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectExcludeMultiple">
            <summary>
            Test Aspect.Exclude with multiple types excluded
            </summary>
            <remarks>
            Should work like negated Aspect.One with same set of types
            </remarks>
        </member>
        <member name="M:UnitTests.TestAspect.TestAspectAllOneExclude">
            <summary>
            Tests Aspect combined of All, One, Exclude filters
            </summary>
        </member>
        <member name="T:UnitTests.TestBag">
            <summary>This is a test class for TestBag and is intended to contain all TestBag Unit Tests.</summary>
        </member>
        <member name="F:UnitTests.TestBag.Capacity">
            <summary>The test Capacity.</summary>
        </member>
        <member name="F:UnitTests.TestBag.TestElement1">
            <summary>The test element1.</summary>
        </member>
        <member name="F:UnitTests.TestBag.TestElement2">
            <summary>The test element2.</summary>
        </member>
        <member name="F:UnitTests.TestBag.TestElement3">
            <summary>The test element3.</summary>
        </member>
        <member name="P:UnitTests.TestBag.TestContext">
            <summary>Gets or sets the test context which provides information about and functionality for the current test run.</summary>
            <value>The test context.</value>
        </member>
        <member name="M:UnitTests.TestBag.TestBagConstructor">
            <summary>Tests the bag constructor.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestAdd">
            <summary>Tests the add.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestAddRange">
            <summary>Tests the add range.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestClear">
            <summary>Tests the clear.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestContains">
            <summary>Tests the contains.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestGet">
            <summary>Tests the get.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestGrow">
            <summary>Tests the grow.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestRemove">
            <summary>Tests the remove.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestRemoveAll">
            <summary>Tests the remove all.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestRemoveLast">
            <summary>Tests the remove last.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestSet">
            <summary>Tests the set.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestCapacity">
            <summary>Tests the capacity.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestIsEmpty">
            <summary>Tests the is empty.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestItem">
            <summary>Tests the item.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestPerformance">
            <summary>Tests the performance.</summary>
        </member>
        <member name="T:UnitTests.TestEntityFactory">
            <summary>The class TestEntityFactory.</summary>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestHealthEntity(Artemis.EntityWorld,System.String,System.String)">
            <summary>Creates the test health entity.</summary>
            <param name="entityWorld">The entity world.</param>
            <param name="group">The group.</param>
            <param name="tag">The tag.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestHealthEntityWithId(Artemis.EntityWorld,System.Int64)">
            <summary>Creates the test health entity with ID.</summary>
            <param name="entityWorld">The entity world.</param>
            <param name="id">The id.</param>
            <returns>The Entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestPowerEntity(Artemis.EntityWorld)">
            <summary>Creates the test power1 entity.</summary>
            <param name="entityWorld">The entity world.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestPowerEntityWithPooledComponent(Artemis.EntityWorld)">
            <summary>Creates the test power2 entity with pooled component.</summary>
            <param name="entityWorld">The entity world.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestPower2Entity(Artemis.EntityWorld)">
            <summary>Creates the test power2 entity.</summary>
            <param name="entityWorld">The entity world.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="T:UnitTests.TestGeneral">
            <summary>The general test.</summary>
        </member>
        <member name="F:UnitTests.TestGeneral.Load">
            <summary>The load.</summary>
        </member>
        <member name="F:UnitTests.TestGeneral.ComponentPool">
            <summary>The component pool.</summary>
        </member>
        <member name="F:UnitTests.TestGeneral.HealthBag">
            <summary>The health bag.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestAttributes">
            <summary>Tests the attributes.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestDummies">
            <summary>Tests the dummies.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestUniqueId">
            <summary>Tests unique id.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestSimpleSystem">
            <summary>Tests a simple system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestSimpleSystem2">
            <summary>
            Tests the simple system2.
            </summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestQueueSystems">
            <summary>Tests the queue systems.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.FTestQueueSystems">
            <summary>Tests the queue systems.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestSystemCommunication">
            <summary>Systems the communication test.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestIntervalEntitySystem">
            <summary>Tests the render multi health bar system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestRenderMultiHealthBarSystem">
            <summary>Tests the render multi health bar system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestMultipleSystems">
            <summary>Tests multiple systems.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestEntityComponentSystem">
            <summary>Tests the entity component system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestDerivedComponents">
            <summary> Test IComponent{T} (Deprecated!)</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestPoolableComponents">
            <summary>Tests poolable components</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestRemoveComponent">
            <summary>Tests removing components</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.RemovedComponent(Artemis.Entity,Artemis.Interface.IComponent)">
            <summary>The removed component.</summary>
            <param name="entity">The entity.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:UnitTests.TestGeneral.RemovedEntity(Artemis.Entity)">
            <summary>The removed entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:UnitTests.TestGeneral.TestInitializeComponentTypes">
            <summary>Tests initializing ComponentTypes.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestInitializeComponentTypesFromAssemblies">
            <summary>Tests initializing ComponentTypes from assemblies.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestComponentTypeBit">
            <summary>Tests ComponentType bits.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestEntitySystemSystemBit">
            <summary>Tests EntitySystem SystemBits.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestEntitySystemSystemBit_Issue_93_More_than_64_Systems">
            <summary>Tests EntitySystem SystemBits Issue 93.</summary>
        </member>
        <member name="T:UnitTests.TestTimeWaster">
            <summary>This is a class.</summary>
        </member>
        <member name="M:UnitTests.TestTimeWaster.#cctor">
            <summary>Initializes static members of the <see cref="T:UnitTests.TestTimeWaster"/> class.</summary>
        </member>
        <member name="P:UnitTests.TestTimeWaster.Result">
            <summary>Gets the result.</summary>
            <value>The result.</value>
        </member>
        <member name="M:UnitTests.TestTimeWaster.Delay(System.Int32)">
            <summary>Delays the specified iterations.</summary>
            <param name="iterations">The iterations.</param>
        </member>
    </members>
</doc>
